[tool.poetry]
name = "json-redo-interview"
version = "0.1.0"
description = ""
authors = ["Francesco Milani <francesco_milani@outlook.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.7.2"
typer = "^0.12.3"
loguru = "^0.7.2"
ijson = "^3.2.3"
pydantic-extra-types = "^2.7.0"
phonenumbers = "^8.13.37"
email-validator = "^2.1.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.6"
mypy = "^1.10.0"
refurb = "^2.0.0"
pytest = "^8.2.1"
ipython = "^8.24.0"
xenon = "^0.9.1"
faker = "^25.3.0"
pytest-mock = "^3.14.0"

[tool.poetry.scripts]
json-redo = "json_redo_interview.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
output-format = "full"
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",   # Pyflakes (F)
    "E",
    "W",   # pycodestyle (E, W)
    "C90", # mccabe (C90)
    "I",   # isort (I)
    # pydocstyle (D)
    "UP",  # pyupgrade (UP)
    "N",   # pep8-naming (N)
    "YTT", # flake8-2020 (YTT)
    # "ANN",  # flake8-annotations (ANN)
    # "S",    # flake8-bandit (S)
    "BLE", # flake8-blind-except (BLE)
    # flake8-boolean-trap (FBT)
    "B",   # flake8-bugbear (B)
    "A",   # flake8-builtins (A)
    "C4",  # flake8-comprehensions (C4)
    "T10", # flake8-debugger (T10)
    # flake8-errmsg (EM)
    "ICN", # flake8-import-conventions (ICN)
    "T20", # flake8-print (T20)
    # "PT",   # flake8-pytest-style (PT)
    "Q", # flake8-quotes (Q)
    # flake8-return (RET)
    "SIM", # flake8-simplify (SIM)
    "TID", # flake8-tidy-imports (TID)
    "ARG", # flake8-unused-arguments (ARG)
    "DTZ", # flake8-datetimez (DTZ)
    "ERA", # eradicate (ERA) until we can remove commented out code this has to stay deactivated
    # pandas-vet (PD)
    # pygrep-hooks (PGH)
    "PLC",
    "PLE",
    "PLR",
    "PLW", # Pylint (PLC, PLE, PLR, PLW)
    "RUF", # Ruff-specific rules (RUF)
]

[tool.mypy]
# Allows Type[T] to refer to abstract classes, which is not otherwise supported.
# See https://github.com/python/mypy/issues/4717
disable_error_code = "type-abstract"
disallow_untyped_defs = true
show_error_codes = true
warn_unused_ignores = true
ignore_missing_imports = true
disallow_incomplete_defs = true
warn_redundant_casts = true
plugins = ["pydantic.mypy"]
